// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudyGO.infrastructure.Data;

#nullable disable

namespace StudyGO.infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250809102730_AddTutorSubjectsEntity")]
    partial class AddTutorSubjectsEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudyGO.infrastructure.Entities.FormatEntity", b =>
                {
                    b.Property<int>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormatId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FormatId");

                    b.ToTable("FormatsEntity");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.SubjectEntity", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubjectId");

                    b.ToTable("SubjectsEntity");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.TutorProfileEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FormatId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.HasKey("UserId");

                    b.HasIndex("FormatId");

                    b.ToTable("TutorProfilesEntity");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.TutorSubjectsEntity", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "TutorId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorSubjectsEntity");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("UsersEntity");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.UserProfileEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("UserProfilesEntity");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.TutorProfileEntity", b =>
                {
                    b.HasOne("StudyGO.infrastructure.Entities.FormatEntity", "Format")
                        .WithMany("TutorProfiles")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyGO.infrastructure.Entities.UserEntity", "User")
                        .WithOne("TutorProfile")
                        .HasForeignKey("StudyGO.infrastructure.Entities.TutorProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.TutorSubjectsEntity", b =>
                {
                    b.HasOne("StudyGO.infrastructure.Entities.SubjectEntity", "Subject")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyGO.infrastructure.Entities.TutorProfileEntity", "Tutor")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.UserProfileEntity", b =>
                {
                    b.HasOne("StudyGO.infrastructure.Entities.SubjectEntity", "FavoriteSubject")
                        .WithMany("UserProfiles")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudyGO.infrastructure.Entities.UserEntity", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("StudyGO.infrastructure.Entities.UserProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavoriteSubject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.FormatEntity", b =>
                {
                    b.Navigation("TutorProfiles");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.SubjectEntity", b =>
                {
                    b.Navigation("TutorSubjects");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.TutorProfileEntity", b =>
                {
                    b.Navigation("TutorSubjects");
                });

            modelBuilder.Entity("StudyGO.infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("TutorProfile");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
